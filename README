README
======

Red Feline Thermometer is a USB termperature sensor. It is designed to be
used attached to a computer for logging applications. It can be fitted into
small enclosures such as a 35mm film canister which can be easily weather
proofed in order to measure outside temperatures. The associated host
program can be used to perform semi-automatic single ended calibration or,
for greater accuracy across a wide temperature range, manual two point
calibration. The host program can also read the data from the device
presenting on standard output allowing additional tools to be easily
written to log data in any manner desired. 

It could be used:

- to maintain long term records the outside (or inside) temperature,
- to graph the heating/cooling cycle of domestic heating systems,
- to compare the heating/cooling cycles of different rooms in the houses (in order to tune the radiator valves),
- to bore people at parties.


FILES IN THE DISTRIBUTION
-------------------------

Readme.txt ........ The file you are currently reading.
circuit/ .......... Diagrams of the circuit.
driver/ ........... Source code for the thermometer manager (thermoman)
firmware/ ......... Source code of the controller firmware.
firmware/usbdrv/ .. USB driver -- See Readme.txt in that directory for info
COPYING ........... Public license (GPL2) for all contents of this project.
Changelog ......... Logfile documenting changes in firm- and hardware.


COMPILING AND INSTALLING
------------------------

This project can be built on Unix (GNU/Linux, FreeBSD or Mac OS X) or Windows
although no testing has been done on any platform except GNU/Linux.

Building on Windows:

You need WinAVR to compile the firmware. A package can be downloaded from:

    WinAVR: http://winavr.sourceforge.net/

To build the firmware with WinAVR, change into the "firmware" directory,
check whether you need to edit the "Makefile" (e.g. change the ISP upload
tool) and type "make" to compile the source code. Before you upload the code
to the device with "make flash", you should set the fuses with "make fuse".

Building on Unix (GNU/Linux, FreeBSD and Mac):

You need the GNU toolchain and avr-libc to compile the firmware. See

    http://www.nongnu.org/avr-libc/user-manual/install_tools.html

for instructions on how to install avr-gcc and avr-libc.

To build the firmware, change to the "firmware" directory, edit "Makefile"
to use the programmer of your choice and type "make" to compile the source
code. Before you upload the code to the device with "make flash", you
should set the fuses with "make fuse".

To build the driver, change to the "driver" directory and type "make". The
driver program, thermoman will be built and can be run from the "driver"
directory.


USING THERMOMAN
---------------

Thermoman uses GNU long options and a summary of usage can be obtained
using "thermoman --help":

--- cut here ---
Usage: ./thermoman [OPTION]...
Driver for the RFThermometer. Shows the current temperature by
default but can also be used to calibrate the device using both
single and double ended methods

Mandatory arguments to long options are mandatory for short options too.
  -c, --calibrate=SENSOR:MIN:MAX:MINADC:MAXADC
                             calibrate a specific sensor using the supplied
                             range (e.g. --calibrate=2v:20:52:440:508 ).
                             Sensor names are: int, 1v, 2v and 3v
      --factory-calibration  adopt factory calibration
  -h, --help                 display this help and exit
  -r, --reset                reset the min/max values
  -s, --show=SENSOR          show results measured with SENSOR (default: 3v)
  -H, --show-hex             show the raw hex packet exchanged with hardware
  -R, --show-raw             show the raw decimal values read from the h/ware
      --single-ended=TEMP    perform fast single ended calibration based on
                             the current temperature (leave time to warm up)
      --unsafe               enable operations that write to devices EEPROM
--- cut here ---

The quick start guide is simple to run "thermoman" with no arguments. If the
sensor has been calibrated the curent temperature (together with the highest
and lowest values observed since power on) will be displayed.

If the sensor has not yet been calibrated (for example because you've only
just built it then a quick and dirty single ended calibration can be
performed from another temperature sensor by calling:
  thermoman --single-ended=<value_in_celcius> --unsafe
  
Note: Leave the device powered up for at least twenty minutes before
      calibrating. Many builds exhibit very significant drift during
      warm up.


HARDWARE
--------

RFThermometer is a member of a family of simple platforms contructed from
Atmel's ATTiny85 microcontrollers. All family members share the same USB
pins and these pins have been carefully selected to avoid using pins
that are needed for in-circuit programming (ICSP). This allows them to be
reprogrammed without disconnecting them from the computer that supplies
them power (if they have an ICSP connector)

The RFThermometer differs from the standard platform by removing the ICSP
connector and using a narrower circuit board allowing it to be squeezed
into smaller enclosures.

USB communications using software bit-banging (thanks to Objective
Development's V-USB driver). Strictly speaking this circuit does not
meeting the USB electrical specification but is close enough to work with
almost all USB hosts. It also uses the USB host clock to calibrate the
ATTiny's internal oscillator eliminating the need for an external crystal.

The result is a very cheap circuit to build. Have fun.


MORE INFORMATION
----------------

RFThermometer was written by Daniel Thompson using driver software and
example code from Objective Development. For other projects by the same
author see:

    http://www.redfelineninja.org.uk/

For more information about Objective Development's firmware-only USB driver
for Atmel's AVR microcontrollers please visit the URL

    http://www.obdev.at/products/vusb/

A technical documentation of the driver's interface can be found in the
file "firmware/usbdrv/usbdrv.h".
